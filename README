CREATE AND MINT TOKEN

The contract MyToken inherits from the ERC20 contract, which is a standard implementation of ERC20 tokens provided by OpenZeppelin. It introduces a new token named "MyToken" with symbol "MTK".
Upon deployment, the contract initializes by minting 1,000,000 tokens and assigning them to the deployer's address. The deployer is also designated as the owner of the contract. The contract 
includes functions to mint (mint) new tokens, restricted to only the owner of the contract, and to burn (burn) tokens, which any token holder can initiate to reduce their token balance. These 
functionalities leverage the inherent security and interoperability of ERC20 tokens, making it suitable for various tokenization applications on the Ethereum blockchain.

DESCRIPTION 

The MyToken contract is a Solidity smart contract designed to deploy and manage an ERC20 token on the Ethereum blockchain. It extends the functionality of ERC20 tokens provided by the OpenZeppelin
library, offering essential features for token creation, ownership management, and token transfers.

GETTING STARTED 
To run this program, you can use Remix, an online Solidity IDE. To get started, go to the Remix website at https://remix.ethereum.org/.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20 {
    address public owner;

    constructor() ERC20("MyToken", "MTK") {
        _mint(msg.sender, 1000000 * 10 ** decimals());
        owner = msg.sender;
    }

    function mint(address to, uint256 amount) public {
        require(msg.sender == owner, "Only the owner can mint");
        _mint(to, amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
}
